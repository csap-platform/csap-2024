user  nginx;
worker_processes  4;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # include /etc/nginx/conf.d/*.conf;

    proxy_cache_path /tmp/mycache keys_zone=mycache:700m;

    server {
        listen 80 ;
        #server_name  localhost;

        location / {
            root   /usr/share/nginx/html;
            autoindex on;
        }

        location /status {
          stub_status on;
          allow all;
        }

        location ~ .txt$ {
          root   /usr/share/nginx/html;
          #deny all;
        }


        location ~ .mp4$ {

            root   /usr/share/nginx/html;

            default_type video/mp4;
            gzip off;
            gzip_static off;

            mp4;

            mp4_buffer_size     5M;
            mp4_max_buffer_size 50M;

            # enable thread bool
            aio threads=default;

            proxy_force_ranges on;

            # enable caching for mp4 videos
            proxy_cache mycache;
            proxy_cache_valid 200 300s;
            proxy_cache_lock on;

            # enable nginx slicing
            slice              1m;
            proxy_cache_key    $host$uri$is_args$args$slice_range;
            proxy_set_header   Range $slice_range;
            proxy_http_version 1.1;

            # Immediately forward requests to the origin if we are filling the cache
            proxy_cache_lock_timeout 0s;

            # Set the 'age' to a value larger than the expected fill time
            proxy_cache_lock_age 200s;

            proxy_cache_use_stale updating;

        }
    }
}